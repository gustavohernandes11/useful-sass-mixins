@mixin reset-list {
	margin: 0;
	padding: 0;
	list-style: none;
}

@mixin square($size, $radius: 0) {
	width: $size;
	height: $size;

	@if $radius != 0 {
		border-radius: $radius;
	}
}

@mixin box-sizing($type) {
	-webkit-box-sizing: $type;
	-moz-box-sizing: $type;
	box-sizing: $type;
}

@mixin column-width($value: 150px) {
	-webkit-column-width: $value;
	-moz-column-width: $value;
	column-width: $value;
}

@mixin font-size($size) {
	font-size: $size;
	font-size: ($size / 16px) * 1rem;
}

@mixin box-shadow($h: 10px, $v: 10px, $b: 0px, $s: 0px, $c: #000000) {
	-webkit-box-shadow: $h $v $b $s $c;
	-moz-box-shadow: $h $v $b $s $c;
	box-shadow: $h $v $b $s $c;
}

@mixin xPos($x) {
	-webkit-transform: translateX($x);
	-moz-transform: translateX($x);
	-ms-transform: translateX($x);
	transform: translateX($x);
}

@mixin flex-direction($direction) {
	@if $direction == column {
		-webkit-flex-direction: vertical;
		-moz-flex-direction: vertical;
		-ms-flex-direction: column;
		-webkit-flex-direction: column;
		flex-direction: column;
	} @else {
		-webkit-flex-direction: horizontal;
		-moz-flex-direction: horizontal;
		-ms-flex-direction: row;
		-webkit-flex-direction: row;
		flex-direction: row;
	}
}

@mixin pseudo($display: block, $pos: absolute, $content: "") {
	content: $content;
	display: $display;
	position: $pos;
}

@mixin responsive-ratio($x, $y, $pseudo: false) {
	$padding: unquote(($y / $x) * 100 + "%");
	@if $pseudo {
		&:before {
			@include pseudo($pos: relative);
			width: 100%;
			padding-top: $padding;
		}
	} @else {
		padding-top: $padding;
	}
}

@mixin css-triangle(
	$color,
	$direction,
	$size: 6px,
	$position: absolute,
	$round: false
) {
	@include pseudo($pos: $position);
	width: 0;
	height: 0;
	@if $round {
		border-radius: 3px;
	}
	@if $direction == down {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
		margin-top: 0 - round($size / 2.5);
	} @else if $direction == up {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
		margin-bottom: 0 - round($size / 2.5);
	} @else if $direction == right {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
		margin-right: -$size;
	} @else if $direction == left {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
		margin-left: -$size;
	}
}

@mixin input-placeholder {
	&.placeholder {
		@content;
	}
	&:-moz-placeholder {
		@content;
	}
	&::-moz-placeholder {
		@content;
	}
	&:-ms-input-placeholder {
		@content;
	}
	&::-webkit-input-placeholder {
		@content;
	}
}
//
$breakpoints: (
	"phone": 400px,
	"phone-wide": 480px,
	"tablet-small": 640px,
	"tablet": 768px,
	"tablet-wide": 1024px,
	"desktop": 1248px,
	"desktop-wide": 1440px,
);
@mixin mq($width, $type: min) {
	@if map_has_key($breakpoints, $width) {
		$width: map_get($breakpoints, $width);
		@if $type == max {
			$width: $width - 1px;
		}
		@media only screen and (#{$type}-width: $width) {
			@content;
		}
	}
}

@mixin truncate($truncation-boundary) {
	max-width: $truncation-boundary;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}
